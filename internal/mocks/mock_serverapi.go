// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dmad1989/urlcut/internal/serverapi (interfaces: Configer,ICutter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jsonobject "github.com/dmad1989/urlcut/internal/jsonobject"
	gomock "github.com/golang/mock/gomock"
)

// MockConfiger is a mock of Configer interface.
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger.
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance.
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// GetEnableHTTPS mocks base method.
func (m *MockConfiger) GetEnableHTTPS() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableHTTPS")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnableHTTPS indicates an expected call of GetEnableHTTPS.
func (mr *MockConfigerMockRecorder) GetEnableHTTPS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableHTTPS", reflect.TypeOf((*MockConfiger)(nil).GetEnableHTTPS))
}

// GetShortAddress mocks base method.
func (m *MockConfiger) GetShortAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShortAddress indicates an expected call of GetShortAddress.
func (mr *MockConfigerMockRecorder) GetShortAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortAddress", reflect.TypeOf((*MockConfiger)(nil).GetShortAddress))
}

// GetTrustedSubnet mocks base method.
func (m *MockConfiger) GetTrustedSubnet() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustedSubnet")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTrustedSubnet indicates an expected call of GetTrustedSubnet.
func (mr *MockConfigerMockRecorder) GetTrustedSubnet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustedSubnet", reflect.TypeOf((*MockConfiger)(nil).GetTrustedSubnet))
}

// GetURL mocks base method.
func (m *MockConfiger) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockConfigerMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockConfiger)(nil).GetURL))
}

// MockICutter is a mock of ICutter interface.
type MockICutter struct {
	ctrl     *gomock.Controller
	recorder *MockICutterMockRecorder
}

// MockICutterMockRecorder is the mock recorder for MockICutter.
type MockICutterMockRecorder struct {
	mock *MockICutter
}

// NewMockICutter creates a new mock instance.
func NewMockICutter(ctrl *gomock.Controller) *MockICutter {
	mock := &MockICutter{ctrl: ctrl}
	mock.recorder = &MockICutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICutter) EXPECT() *MockICutterMockRecorder {
	return m.recorder
}

// Cut mocks base method.
func (m *MockICutter) Cut(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cut", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cut indicates an expected call of Cut.
func (mr *MockICutterMockRecorder) Cut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cut", reflect.TypeOf((*MockICutter)(nil).Cut), arg0, arg1)
}

// DeleteUrls mocks base method.
func (m *MockICutter) DeleteUrls(arg0 string, arg1 jsonobject.ShortIds) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUrls", arg0, arg1)
}

// DeleteUrls indicates an expected call of DeleteUrls.
func (mr *MockICutterMockRecorder) DeleteUrls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrls", reflect.TypeOf((*MockICutter)(nil).DeleteUrls), arg0, arg1)
}

// GetKeyByValue mocks base method.
func (m *MockICutter) GetKeyByValue(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByValue", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByValue indicates an expected call of GetKeyByValue.
func (mr *MockICutterMockRecorder) GetKeyByValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByValue", reflect.TypeOf((*MockICutter)(nil).GetKeyByValue), arg0, arg1)
}

// GetUserURLs mocks base method.
func (m *MockICutter) GetUserURLs(arg0 context.Context) (jsonobject.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", arg0)
	ret0, _ := ret[0].(jsonobject.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockICutterMockRecorder) GetUserURLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockICutter)(nil).GetUserURLs), arg0)
}

// PingDB mocks base method.
func (m *MockICutter) PingDB(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockICutterMockRecorder) PingDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockICutter)(nil).PingDB), arg0)
}

// UploadBatch mocks base method.
func (m *MockICutter) UploadBatch(arg0 context.Context, arg1 jsonobject.Batch) (jsonobject.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBatch", arg0, arg1)
	ret0, _ := ret[0].(jsonobject.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBatch indicates an expected call of UploadBatch.
func (mr *MockICutterMockRecorder) UploadBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBatch", reflect.TypeOf((*MockICutter)(nil).UploadBatch), arg0, arg1)
}
